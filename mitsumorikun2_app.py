# app.py ÔºàAIË¶ãÁ©ç„ÇÇ„Çä„Åè„ÇìÔºí / GPTÁ≥ª„ÅÆ„ÅøÂØæÂøú„ÉªÂ∫ÉÂëäÂà∂‰ΩúÂÖ®Ëà¨„Ç´„ÉÜ„Ç¥„É™‰æã‰ªò„Åç„ÉªDD„ÉÜ„É≥„Éó„É¨Âá∫Âäõ„ÅÇ„ÇäÔºâ

import os
import json
import importlib
from io import BytesIO
from datetime import date
import pandas as pd

import streamlit as st
from dateutil.relativedelta import relativedelta
from openpyxl import load_workbook
from openpyxl.styles import Font
from openpyxl.utils import column_index_from_string, get_column_letter

# ===== OpenAI v1 SDK =====
from openai import OpenAI
import httpx

# =========================
# „Éö„Éº„Ç∏Ë®≠ÂÆö
# =========================
st.set_page_config(page_title="AIË¶ãÁ©ç„ÇÇ„Çä„Åè„ÇìÔºí", layout="centered")

# =========================
# Secrets
# =========================
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
APP_PASSWORD   = st.secrets["APP_PASSWORD"]
OPENAI_ORG_ID  = st.secrets.get("OPENAI_ORG_ID", None)

if not OPENAI_API_KEY:
    st.error("OPENAI_API_KEY „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇst.secrets „ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()

os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
if OPENAI_ORG_ID:
    os.environ["OPENAI_ORG_ID"] = OPENAI_ORG_ID

# OpenAI „ÇØ„É©„Ç§„Ç¢„É≥„Éà
openai_client = OpenAI(http_client=httpx.Client(timeout=60.0))

# =========================
# ÂÆöÊï∞
# =========================
TAX_RATE = 0.10

# =========================
# „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ
# =========================
for k in ["chat_history", "items_json_raw", "items_json", "df", "meta"]:
    if k not in st.session_state:
        st.session_state[k] = None

if st.session_state["chat_history"] is None:
    st.session_state["chat_history"] = [
        {"role": "system", "content": "„ÅÇ„Å™„Åü„ÅØÂ∫ÉÂëä„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„ÉñÂà∂‰Ωú„ÅÆ„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Åß„Åô„ÄÇÁõ∏Â†¥ÊÑü„Çí„ÇÇ„Å®„Å´Ë¶ãÁ©ç„ÇÇ„Çä„Çí‰ΩúÊàê„Åô„Çã„Åü„ÇÅ„ÄÅ„É¶„Éº„Ç∂„Éº„Å´„Éí„Ç¢„É™„É≥„Ç∞„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ"},
        {"role": "assistant", "content": "„Åì„Çì„Å´„Å°„ÅØÔºÅ„Åì„Å°„Çâ„ÅØ„ÄåAIË¶ãÁ©ç„ÇÇ„Çä„Åè„ÇìÔºí„Äç„Åß„Åô„ÄÇË¶ãÁ©ç„ÇÇ„Çä‰ΩúÊàê„ÅÆ„Åü„ÇÅ„Å´„ÄÅ„Åæ„ÅöÊ°à‰ª∂Ê¶ÇË¶Å„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"}
    ]

# =========================
# Ë™çË®º
# =========================
st.title("üí∞ AIË¶ãÁ©ç„ÇÇ„Çä„Åè„ÇìÔºí")
password = st.text_input("„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", type="password")
if password != APP_PASSWORD:
    st.warning("üîí Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô")
    st.stop()

# =========================
# „ÉÅ„É£„ÉÉ„ÉàUI
# =========================
st.header("„ÉÅ„É£„ÉÉ„Éà„Åß„Éí„Ç¢„É™„É≥„Ç∞")

for msg in st.session_state["chat_history"]:
    if msg["role"] == "assistant":
        st.chat_message("assistant").write(msg["content"])
    elif msg["role"] == "user":
        st.chat_message("user").write(msg["content"])

if user_input := st.chat_input("Ë¶Å‰ª∂„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."):
    st.session_state["chat_history"].append({"role": "user", "content": user_input})

    with st.chat_message("user"):
        st.write(user_input)

    with st.chat_message("assistant"):
        with st.spinner("AI„ÅåËÄÉ„Åà„Å¶„ÅÑ„Åæ„Åô..."):
            resp = openai_client.chat.completions.create(
                model="gpt-4.1",
                messages=st.session_state["chat_history"],
                temperature=0.4,
                max_tokens=1200
            )
            reply = resp.choices[0].message.content
            st.write(reply)
            st.session_state["chat_history"].append({"role": "assistant", "content": reply})

# =========================
# Ë¶ãÁ©ç„ÇÇ„ÇäÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà
# =========================
def build_prompt_for_estimation(chat_history):
    return f"""
ÂøÖ„ÅöÊúâÂäπ„Å™ JSON „ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨ÊòéÊñá„ÅØÁ¶ÅÊ≠¢„Åß„Åô„ÄÇ

„ÅÇ„Å™„Åü„ÅØÂ∫ÉÂëäÂà∂‰Ωú„ÅÆË¶ãÁ©ç„ÇÇ„Çä‰ΩúÊàê„Ç®„Ç≠„Çπ„Éë„Éº„Éà„Åß„Åô„ÄÇ
‰ª•‰∏ã„ÅÆ‰ºöË©±Â±•Ê≠¥„Çí„ÇÇ„Å®„Å´„ÄÅË¶ãÁ©ç„ÇÇ„Çä„ÅÆÂÜÖË®≥„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„Äê‰ºöË©±Â±•Ê≠¥„Äë
{json.dumps(chat_history, ensure_ascii=False, indent=2)}

„Äê„Ç´„ÉÜ„Ç¥„É™‰æã„Äë
‰ª•‰∏ã„ÅØÂ∫ÉÂëäÂà∂‰Ωú„Åß„Çà„Åè‰Ωø„Çè„Çå„Çã„Ç´„ÉÜ„Ç¥„É™„ÅÆ‰æã„Åß„ÅôÔºö
- ‰ºÅÁîª„ÉªÊà¶Áï•Èñ¢ÈÄ£Ôºà‰ºÅÁîªË≤ª„ÄÅ„É™„Çµ„Éº„ÉÅË≤ª„ÄÅ„Ç≥„Éî„Éº„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„ÄÅ„Éá„Ç£„É¨„ÇØ„Ç∑„Éß„É≥ „Å™„Å©Ôºâ
- „Éá„Ç∂„Ç§„É≥„Éª„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„ÉñÂà∂‰ΩúÔºà„Éá„Ç∂„Ç§„É≥Ë≤ª„ÄÅ„Ç¢„Éº„Éà„Éá„Ç£„É¨„ÇØ„Ç∑„Éß„É≥„ÄÅ„Ç§„É©„Çπ„ÉàÂà∂‰Ωú „Å™„Å©Ôºâ
- ÊíÆÂΩ±„ÉªÊò†ÂÉèÈñ¢ÈÄ£ÔºàÊíÆÂΩ±Ë≤ª„ÄÅ„Çπ„Çø„ÉÉ„ÉïË≤ª„ÄÅÂá∫ÊºîË≤ª„ÄÅÊíÆÂΩ±Ê©üÊùêË≤ª „Å™„Å©Ôºâ
- Á∑®ÈõÜ„Éª‰ªï‰∏ä„ÅíÔºàÁ∑®ÈõÜË≤ª„ÄÅCG/VFX„ÄÅMA„ÄÅÂ≠óÂπïÂà∂‰Ωú „Å™„Å©Ôºâ
- WebÈñ¢ÈÄ£Ôºà„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÄÅCMSÂÆüË£Ö„ÄÅ„ÉÜ„Çπ„Éà„ÉªQA„ÄÅ„Çµ„Éº„Éê„ÉºË≤ª „Å™„Å©Ôºâ
- ÈÖç‰ø°„ÉªÂ™í‰ΩìÈñ¢ÈÄ£ÔºàÂ™í‰ΩìÂá∫Á®øË≤ª„ÄÅÈÖç‰ø°ÁÆ°ÁêÜË≤ª„ÄÅÂ∫ÉÂëäÂØ©ÊüªË≤ª „Å™„Å©Ôºâ
- „Éó„É≠„É¢„Éº„Ç∑„Éß„É≥„Éª„Ç§„Éô„É≥„ÉàÈñ¢ÈÄ£Ôºà„Ç§„Éô„É≥„ÉàÈÅãÂñ∂Ë≤ª„ÄÅ‰ºöÂ†¥Ë≤ª„ÄÅÊñΩÂ∑•Ë≤ª„ÄÅ„Çπ„Çø„ÉÉ„ÉïÊ¥æÈÅ£ „Å™„Å©Ôºâ
- Ë´∏ÁµåË≤ª„ÉªÂÖ±ÈÄöÈ†ÖÁõÆÔºà‰∫§ÈÄöË≤ª„ÄÅÂÆøÊ≥äË≤ª„ÄÅÊ∂àËÄóÂìÅË≤ª„ÄÅÈõëË≤ª „Å™„Å©Ôºâ
- ÁÆ°ÁêÜË≤ªÔºàÂõ∫ÂÆö„Éª‰∏ÄÂºèÔºâ

„Äê„É´„Éº„É´„Äë
- ‰∏äË®ò„Ç´„ÉÜ„Ç¥„É™„ÇíÂèÇËÄÉ„Å´„Åó„Å§„Å§„ÄÅÊ°à‰ª∂ÂÜÖÂÆπ„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å´ÈÅ∏Êäû„ÉªËøΩÂä†„ÉªÂâäÈô§„Åó„Å¶ÊßãÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
- ÂêÑË¶ÅÁ¥†„Ç≠„Éº: category / task / qty / unit / unit_price / note
- qty, unit „ÅØÂ¶•ÂΩì„Å™ÂÄ§ÔºàÊó•/Âºè/‰∫∫/ÊôÇÈñì/„Ç´„ÉÉ„ÉàÁ≠âÔºâ
- Âçò‰æ°„ÅØÂ∫ÉÂëäÂà∂‰Ωú„ÅÆ‰∏ÄËà¨Áõ∏Â†¥„ÅßÊé®ÂÆö
- „ÄåÁÆ°ÁêÜË≤ª„Äç„ÅØÂøÖ„ÅöÂê´„ÇÅ„ÇãÔºàtask=ÁÆ°ÁêÜË≤ªÔºàÂõ∫ÂÆöÔºâ, qty=1, unit=ÂºèÔºâ
- ÂêàË®à„ÇÑÁ®é„ÅØÂê´„ÇÅ„Å™„ÅÑ
"""

# =========================
# JSON„Éë„Éº„Çπ
# =========================
def robust_parse_items_json(raw: str) -> str:
    try:
        obj = json.loads(raw)
        if not isinstance(obj, dict):
            obj = {"items": []}
        if "items" not in obj:
            obj["items"] = []
        return json.dumps(obj, ensure_ascii=False)
    except Exception:
        return json.dumps({"items":[]}, ensure_ascii=False)

# =========================
# Ë®àÁÆó
# =========================
def df_from_items_json(items_json: str) -> pd.DataFrame:
    try:
        data = json.loads(items_json) if items_json else {}
    except Exception:
        data = {}
    items = data.get("items", []) or []
    norm = []
    for x in items:
        norm.append({
            "category": str(x.get("category", "")),
            "task": str(x.get("task", "")),
            "qty": x.get("qty", 0),
            "unit": str(x.get("unit", "")),
            "unit_price": x.get("unit_price", 0),
            "note": str(x.get("note", "")),
        })
    df = pd.DataFrame(norm)
    df["Â∞èË®à"] = (df["qty"].astype(float) * df["unit_price"].astype(float)).astype(int)
    return df

def compute_totals(df: pd.DataFrame):
    taxable = int(df["Â∞èË®à"].sum())
    tax = int(round(taxable * TAX_RATE))
    total = taxable + tax
    return {
        "taxable": taxable,
        "tax": tax,
        "total": total
    }

# =========================
# DD„ÉÜ„É≥„Éó„É¨Âá∫Âäõ
# =========================
TOKEN_ITEMS = "{{ITEMS_START}}"
COLMAP = {"task": "B", "qty": "O", "unit": "Q", "unit_price": "S", "amount": "W"}

def _find_token(ws, token: str):
    for row in ws.iter_rows(values_only=False):
        for cell in row:
            if isinstance(cell.value, str) and cell.value.strip() == token:
                return cell.row, cell.column
    return None, None

def _ensure_amount_formula(ws, row, qty_col_idx, price_col_idx, amount_col_idx):
    c = ws.cell(row=row, column=amount_col_idx)
    qcol = get_column_letter(qty_col_idx)
    pcol = get_column_letter(price_col_idx)
    c.value = f"={qcol}{row}*{pcol}{row}"
    c.number_format = '#,##0'

def _write_items_to_template(ws, df_items: pd.DataFrame):
    r0, c0 = _find_token(ws, TOKEN_ITEMS)
    if r0:
        ws.cell(row=r0, column=c0).value = None
    start_row = r0 or 19

    c_task = column_index_from_string(COLMAP["task"])
    c_qty  = column_index_from_string(COLMAP["qty"])
    c_unit = column_index_from_string(COLMAP["unit"])
    c_price= column_index_from_string(COLMAP["unit_price"])
    c_amt  = column_index_from_string(COLMAP["amount"])

    r = start_row
    current_cat = None

    for _, row in df_items.iterrows():
        cat = str(row.get("category", "")) or ""
        if cat != current_cat:
            ws.cell(row=r, column=c_task).value = cat
            ws.cell(row=r, column=c_task).font = Font(bold=True)
            _ensure_amount_formula(ws, r, c_qty, c_price, c_amt)
            current_cat = cat
            r += 1

        ws.cell(row=r, column=c_task).value  = str(row.get("task",""))
        ws.cell(row=r, column=c_qty).value   = float(row.get("qty", 0) or 0)
        ws.cell(row=r, column=c_unit).value  = str(row.get("unit",""))
        ws.cell(row=r, column=c_price).value = int(float(row.get("unit_price", 0) or 0))
        _ensure_amount_formula(ws, r, c_qty, c_price, c_amt)
        r += 1

def export_with_template(template_bytes: bytes, df_items: pd.DataFrame):
    wb = load_workbook(filename=BytesIO(template_bytes))
    ws = wb.active
    _write_items_to_template(ws, df_items)
    out = BytesIO()
    wb.save(out)
    out.seek(0)
    return out

# =========================
# ÂÆüË°å
# =========================
if st.button("üìù AIË¶ãÁ©ç„ÇÇ„Çä„Åè„Çì„ÅßË¶ãÁ©ç„ÇÇ„Çä„ÇíÁîüÊàê„Åô„Çã"):
    with st.spinner("AI„ÅåË¶ãÁ©ç„ÇÇ„Çä„ÇíÁîüÊàê‰∏≠‚Ä¶"):
        prompt = build_prompt_for_estimation(st.session_state["chat_history"])
        resp = openai_client.chat.completions.create(
            model="gpt-4.1",
            messages=[{"role":"system","content":"You MUST return only valid JSON."},
                      {"role":"user","content":prompt}],
            response_format={"type":"json_object"},
            temperature=0.2,
            max_tokens=4000
        )
        raw = resp.choices[0].message.content or '{"items":[]}'
        items_json = robust_parse_items_json(raw)
        df = df_from_items_json(items_json)
        meta = compute_totals(df)

        st.session_state["items_json_raw"] = raw
        st.session_state["items_json"] = items_json
        st.session_state["df"] = df
        st.session_state["meta"] = meta

# =========================
# Ë°®Á§∫ & „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
# =========================
if st.session_state["df"] is not None:
    st.success("‚úÖ Ë¶ãÁ©ç„ÇÇ„ÇäÁµêÊûú„Éó„É¨„Éì„É•„Éº")
    st.dataframe(st.session_state["df"])

    st.write(f"**Â∞èË®àÔºàÁ®éÊäúÔºâ:** {st.session_state['meta']['taxable']:,}ÂÜÜ")
    st.write(f"**Ê∂àË≤ªÁ®é:** {st.session_state['meta']['tax']:,}ÂÜÜ")
    st.write(f"**ÂêàË®à:** {st.session_state['meta']['total']:,}ÂÜÜ")

    # Excel DL
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
        st.session_state["df"].to_excel(writer, index=False, sheet_name="Ë¶ãÁ©ç„ÇÇ„Çä")
    buf.seek(0)
    st.download_button("üì• Excel„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ", buf, "Ë¶ãÁ©ç„ÇÇ„Çä.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    # DDË¶ãÁ©çÊõ∏„ÉÜ„É≥„Éó„É¨
    tmpl = st.file_uploader("DDË¶ãÁ©çÊõ∏„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºà.xlsxÔºâ", type=["xlsx"])
    if tmpl is not None:
        out = export_with_template(tmpl.read(), st.session_state["df"])
        st.download_button("üì• DDË¶ãÁ©çÊõ∏„ÉÜ„É≥„Éó„É¨„ÅßÂá∫Âäõ", out, "Ë¶ãÁ©ç„ÇÇ„Çä_DD„ÉÜ„É≥„Éó„É¨.xlsx")
